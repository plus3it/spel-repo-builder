name: Spel repo builder
on:
  # Run on demand
  workflow_dispatch:

  # Run pull requests against the main branch
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile.*'
      - '.github/workflows/build.yml'
      - 'package-templates/**'

  # Run when a release is created
  release:
    types: [released]

permissions:
  id-token: write

concurrency: 
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  BuildRepo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        el_version: [7, 8]
    env:
      SPEL_RELEASE_RELEASE: 3
      AWS_DEFAULT_REGION: us-east-1
      REPO_ENDPOINT: https://spel-packages.cloudarmor.io
      REPO_BUCKET: spel-packages
      REPO_PREFIX: repo
      GPG_NAME: SPEL Packages <spel-packages@plus3it.com>
      DOCKER_NAME: spel-packages-el${{ matrix.el_version }}
      REPO_PATH: .repo/el${{ matrix.el_version }}
    steps:
      - name: Clone this git repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846

      - name: Retrieve existing spel-packages yum repo
        run: |
          mkdir -p ./${{ env.REPO_PATH }}
          aws s3 sync --no-sign-request --exact-timestamps --endpoint-url ${{ env.REPO_ENDPOINT }} s3://${{ env.REPO_BUCKET }}/${{ env.REPO_PREFIX }}/el${{ matrix.el_version }} ./${{ env.REPO_PATH }}

      - name: Get pinned versions
        run: |
          echo "AMAZONLINUX_VERSION=$(make amazonlinux/version)" | tee -a "$GITHUB_ENV"
          echo "CENTOS_VERSION=$(make centos${{ matrix.el_version }}/version)" | tee -a "$GITHUB_ENV"
          echo "GOMPLATE_VERSION=$(make gomplate/version)" | tee -a "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Build el${{ matrix.el_version }} repo
        uses: docker/build-push-action@1814d3dfb36d6f84174e61f4a4b05bd84089a4b9
        with:
          file: Dockerfile.el${{ matrix.el_version }}
          context: .
          load: true
          tags: ${{ env.DOCKER_NAME }}
          build-args: |
            AMZN_VERSION=${{ env.AMAZONLINUX_VERSION }}
            CENTOS_VERSION=${{ env.CENTOS_VERSION }}
            GOMPLATE_VERSION=${{ env.GOMPLATE_VERSION }}
            EPEL_RELEASE_URL=https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{ matrix.el_version }}.noarch.rpm
            SPEL_RELEASE_BASEURL=${{ env.REPO_ENDPOINT }}/${{ env.REPO_PREFIX }}/el${{ matrix.el_version }}
            SPEL_RELEASE_RELEASE=${{ env.SPEL_RELEASE_RELEASE }}

      - name: Copy built packages to host
        run: |
          docker run -dit --rm \
            --name ${{ env.DOCKER_NAME }} \
            ${{ env.DOCKER_NAME }}
          docker cp ${{ env.DOCKER_NAME }}:/spel-packages/builder/repo/. ./${{ env.REPO_PATH }}/

      - name: Import GPG key
        if: github.event_name != 'pull_request'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@cb4264d3319acaa2bea23d51ef67f80b4f775013
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign packages
        if: github.event_name != 'pull_request'
        run: |
          mapfile -t PACKAGES < <(find ./${{ env.REPO_PATH }}/packages -name '*.rpm' -type f)
          rpmsign --addsign \
            --define='%_gpg_name ${{ env.GPG_NAME }}' \
            --define='%_signature gpg' \
            "${PACKAGES[@]}"

      - name: Create yum repo and copy repodata to host
        run: |
          rm -rf ./${{ env.REPO_PATH }}/repodata
          docker cp ./${{ env.REPO_PATH }} ${{ env.DOCKER_NAME }}:/spel-packages/repo
          docker exec ${{ env.DOCKER_NAME }} createrepo /spel-packages/repo
          docker cp ${{ env.DOCKER_NAME }}:/spel-packages/repo/repodata ./${{ env.REPO_PATH }}/

      - name: Sign yum repodata
        if: github.event_name != 'pull_request'
        run: |
          gpg --batch --yes \
            --detach-sign --armor \
            -u '${{ env.GPG_NAME }}' \
            ./${{ env.REPO_PATH }}/repodata/repomd.xml
          docker cp ./${{ env.REPO_PATH }}/repodata/repomd.xml.asc ${{ env.DOCKER_NAME }}:/spel-packages/repo/repodata

      - name: Test signed packages and yum repo
        if: github.event_name != 'pull_request'
        run: |
          docker exec \
            ${{ env.DOCKER_NAME }} \
            bash -c 'yum install -y --setopt=skip_missing_names_on_install=False $(<packages-built)'
          docker stop ${{ env.DOCKER_NAME }}

      - name: Test unsigned packages and yum repo
        if: github.event_name == 'pull_request'
        run: |
          docker exec \
            ${{ env.DOCKER_NAME }} \
            bash -c 'yum install -y --nogpgcheck --setopt=skip_missing_names_on_install=False $(<packages-built)'
          docker stop ${{ env.DOCKER_NAME }}

      - name: configure aws credentials
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: us-east-1

      - name:  Validate credential
        if: github.event_name != 'pull_request'
        run: aws sts get-caller-identity

      - name: Push repo to s3 bucket
        if: github.event_name != 'pull_request'
        run: |
          aws s3 sync --delete ./${{ env.REPO_PATH }}/ s3://${{ env.REPO_BUCKET }}/${{ env.REPO_PREFIX }}/el${{ matrix.el_version }}/
          aws s3 cp ./${{ env.REPO_PATH }}/packages/noarch/spel-release-${{ matrix.el_version}}-${{ env.SPEL_RELEASE_RELEASE }}.noarch.rpm s3://${{ env.REPO_BUCKET }}/${{ env.REPO_PREFIX }}/spel-release-latest-${{ matrix.el_version }}.noarch.rpm
